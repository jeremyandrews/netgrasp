#!/usr/bin/env python2

from netgrasp.utils import debug
from netgrasp.utils import exclusive_lock
from netgrasp.utils import email
from netgrasp.utils import simple_timer
from netgrasp.utils import pretty
from netgrasp.config import config
from netgrasp.notify import notify
from netgrasp.database import database
from netgrasp import netgrasp

import argparse
import ConfigParser
import sys
import os
import pwd
import signal
import errno
import datetime
import fcntl
import time

# Determine if pid in pidfile is a running process.
def is_running(pidfile):
    running = False
    if os.path.isfile(pidfile):
        f = open(pidfile)
        pid = int(f.readline())
        f.close()
        if pid > 0:
            ng.debugger.info("Found pidfile %s, contained pid %d", (pidfile, pid))
            try:
                os.kill(pid, 0)
            except OSError as e:
                if e.errno == errno.EPERM:
                    running = pid
            else:
                running = pid
    return running
    return str(day_diff / 365) + " years ago"

# Truncate strings when they're too long.
def truncate_string(string, maxlength, suffix = "..."):
    if len(string) <= maxlength:
        return string
    return """%s%s""" % (string[:(maxlength - len(suffix))], suffix)

def start(args):
    ng.is_running = is_running(ng.pidfile)
    if ng.is_running:
        ng.debugger.critical("Netgrasp is already running with pid %d.", (ng.is_running,))
    ng.debugger.info("Starting netgrasp...")

    if args.verbose:
        verbose = args.verbose
    else:
        verbose = False

    if args.foreground:
        daemonize = False
    else:
        daemonize = True

    # Re-instantiate Netgrasp with proper parameters
    daemon_ng = netgrasp.Netgrasp(config, verbose, daemonize)
    daemon_ng.args = args
    netgrasp.netgrasp_instance = daemon_ng
    netgrasp.start()

def stop(args):
    if not ng.is_running:
        ng.debugger.critical("Netgrasp is not running.")
    ng.debugger.info("Stopping netgrasp...")
    try:
        os.kill(ng.is_running, signal.SIGTERM)
    except OSError as e:
        if e.errno == errno.EPERM:
            ng.debugger.critical("Failed (perhaps try with sudo): %s", (e))
        else:
            ng.debugger.critical("Failed: %s", (e,))

def restart(args):
    stop(args)
    time.sleep(1)
    start(args)

def status(args):
    if ng.is_running:
        ng.debugger.warning("Netgrasp is running with pid %d", (ng.is_running,))
    else:
        ng.debugger.warning("Netgrasp is not running.")

def list(args):
    if not ng.is_running:
        ng.debugger.critical("Netgrasp is not running.")

    ng.database_filename = ng.config.GetText('Database', 'filename')

    try:
        ng.db = database.Database(ng.database_filename, ng.debugger)
        database.database_instance = ng.db
    except Exception as e:
        ng.debugger.error("%s", (e,))
        ng.debugger.critical("Failed to open or create database file %s (as user %s), exiting.", (ng.database_filename, ng.debugger.whoami()))

    ng.debugger.info("Opened %s as user %s", (ng.database_filename, ng.debugger.whoami()))

    ng.db.cursor = ng.db.connection.cursor()

    if args.type == "device":
        # List devices.
        query = database.SelectQueryBuilder("seen", ng.debugger, verbose)
        query.db_select("{%BASE}.mac")
        query.db_select("{%BASE}.ip")
        query.db_select("{%BASE}.lastSeen")

        if args.all:
            description = "All devices"
        else:
            description = "Active devices"
            query.db_where("{%BASE}.active = ?", 1)

        if (not args.all or args.all == 1):
            query.db_group("{%BASE}.mac")
            query.db_group("{%BASE}.ip")

        query.db_order("{%BASE}.lastSeen DESC")

        rowFormat = "{:>16}{:>34}{:>22}"
        header = ["IP", "Name", "Last seen"]

    elif args.type == 'event':
        # List events.
        query = database.SelectQueryBuilder("event", ng.debugger, verbose)
        query.db_select("{%BASE}.mac")
        query.db_select("{%BASE}.ip")
        query.db_select("{%BASE}.timestamp")
        query.db_select("{%BASE}.event")

        if args.all:
            description = "All alerts"
        else:
            description = "Recent alerts"
            ng.active_timeout = ng.config.GetInt('Listen', 'active_timeout', 60 * 60 * 2, False)
            recent = datetime.datetime.now() - datetime.timedelta(seconds=ng.active_timeout)
            query.db_where("{%BASE}.timestamp >= ?", recent)

        if (not args.all or args.all == 1):
            query.db_group("{%BASE}.mac")
            query.db_group("{%BASE}.ip")
            query.db_group("{%BASE}.event")

        query.db_order("{%BASE}.timestamp DESC")

        rowFormat = "{:>16}{:>24}{:>21}{:>18}"
        header = ["IP", "Name", "Event", "Last seen"]

    if args.mac:
        query.db_where("{%BASE}.mac LIKE ?", "%"+args.mac+"%")
        if not args.mac == netgrasp.BROADCAST:
            query.db_where("{%BASE}.mac != ?", netgrasp.BROADCAST)
    else:
        query.db_where("{%BASE}.mac != ?", netgrasp.BROADCAST)

    if args.ip:
        query.db_where("{%BASE}.ip LIKE ?", "%"+args.ip+"%")

    if args.vendor:
        query.db_leftjoin("vendor", "{%BASE}.mac = vendor.mac")
        query.db_where("vendor.vendor LIKE ?", "%"+args.vendor+"%")

    if args.hostname:
        query.db_leftjoin("host", "({%BASE}.mac = host.mac AND {%BASE}.ip = host.ip)")
        query.db_where("host.hostname LIKE ?", "%"+args.hostname+"%")

    if args.custom:
        query.db_leftjoin("vendor", "{%BASE}.mac = vendor.mac")
        query.db_leftjoin("host", "({%BASE}.mac = host.mac AND {%BASE}.ip = host.ip)")
        query.db_where("(vendor.customname LIKE ? OR host.customname LIKE ?)", ["%"+args.custom+"%", "%"+args.custom+"%"], True)

    ng.db.cursor.execute(query.db_query(), query.db_args())
    rows = ng.db.cursor.fetchall()
    if rows:
        print """ %s:""" % description
        print rowFormat.format(*header)
    for row in rows:
        if args.type == 'device':
            print rowFormat.format(truncate_string(row[1], 15), truncate_string(pretty.name_ip(row[1], row[0]), 32), truncate_string(pretty.pretty_date(row[2]), 20))
        else:
            print rowFormat.format(truncate_string(row[1], 15), truncate_string(pretty.name_ip(row[1], row[0]), 22), truncate_string(row[3], 19), truncate_string(pretty.pretty_date(row[2]), 16))

def identify(args):
    if not ng.is_running:
        ng.debugger.critical("Netgrasp is not running.")

    ng.database_filename = ng.config.GetText("Database", "filename")

    try:
        ng.db = database.Database(ng.database_filename, ng.debugger)
        database.database_instance = ng.db
    except Exception as e:
        ng.debugger.error("%s", (e,))
        ng.debugger.critical("Failed to open or create database file %s (as user %s), exiting.", (ng.database_filename, ng.debugger.whoami()))

        ng.debugger.info("Opened %s as user %s", (ng.database_filename, ng.debugger.whoami()))

    ng.db.cursor = ng.db.connection.cursor()
    ng._database_lock = exclusive_lock.ExclusiveFileLock(ng.config.GetText('Database', 'lockfile', netgrasp.DEFAULT_DBLOCK, False))
    ng.db.lock = ng._database_lock

    if not args.set:
        description = "Use --set ID 'CUSTOM NAME' to set a custom name on a device"
        header = ["ID", "IP", "Name", "Last seen"]
        rowFormat = "{:>7}{:>16}{:>34}{:>22}"

        query = database.SelectQueryBuilder("host", ng.debugger, verbose)
        query.db_select("{%BASE}.hid")
        query.db_select("{%BASE}.mac")
        query.db_select("{%BASE}.ip")

        query.db_leftjoin("seen", "({%BASE}.ip = seen.ip AND {%BASE}.mac = seen.mac)")
        query.db_select("seen.lastSeen")
        query.db_group("seen.ip")
        query.db_group("seen.mac")
        query.db_order("seen.lastSeen DESC")

        if not args.all and not args.custom:
            query.db_where("{%BASE}.customname IS NULL")

        if args.mac:
            query.db_where("{%BASE}.mac LIKE ?", "%"+args.mac+"%")

        if not args.all > 2 and not args.mac == netgrasp.BROADCAST:
            query.db_where("{%BASE}.mac != ?", netgrasp.BROADCAST)

        if args.ip:
            query.db_where("{%BASE}.ip LIKE ?", "%"+args.ip+"%")

        if args.vendor:
            query.db_leftjoin("vendor", "{%BASE}.mac = vendor.mac")
            query.db_where("vendor.vendor LIKE ?", "%"+args.vendor+"%")

        if args.hostname:
            query.db_where("host.hostname LIKE ?", "%"+args.hostname+"%")

        if args.custom:
            query.db_leftjoin("vendor", "{%BASE}.mac = vendor.mac")
            query.db_where("(vendor.customname LIKE ? OR host.customname LIKE ?)", ["%"+args.custom+"%", "%"+args.custom+"%"], True)

        ng.db.cursor.execute(query.db_query(), query.db_args())
        rows = ng.db.cursor.fetchall()
        if rows:
            print """ %s:""" % description
            print rowFormat.format(*header)
        for row in rows:
            print rowFormat.format(row[0], truncate_string(row[2], 15), truncate_string(pretty.name_ip(row[2], row[1]), 32), truncate_string(pretty.pretty_date(row[3]), 20))
    else:
        if args.verbose > 1:
            print "id:", args.set[0], "| custom name:", args.set[1]
        ng.db.cursor.execute("SELECT vendor.vid FROM vendor LEFT JOIN host ON vendor.mac = host.mac WHERE host.hid = ?", (args.set[0],))
        row = ng.db.cursor.fetchone()
        if row:
            ng.db.lock.acquire()
            db_args = [args.set[1]]
            db_args.append(args.set[0])
            ng.db.cursor.execute("UPDATE host SET customname = ? WHERE hid = ?", db_args)
            db_args = [args.set[1]]
            db_args.append(row[0])
            ng.db.cursor.execute("UPDATE vendor SET customname = ? WHERE vid = ?", db_args)
            ng.db.connection.commit()
            ng.db.lock.release()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            prog="netgrasp",
            description="A passive network observation tool")
    # --verbose -v, verbose
    parser.add_argument("--verbose", "-v", action="count", help="verbose output")
    # --config -c, configuration file
    parser.add_argument("--config", "-c", help="specify custom path for configuration file")

    subparsers = parser.add_subparsers()

    # start
    parser_start = subparsers.add_parser("start", help="start netgrasp")
    parser_start.add_argument("--verbose", "-v", action="count", help="verbose logging")
    parser_start.add_argument("--foreground", "-f", action="count", help="don't daemonize, run in the foreground")
    parser_start.set_defaults(func=start)

    # stop
    parser_stop = subparsers.add_parser("stop", help="stop netgrasp")
    parser_stop.set_defaults(func=stop)

    # restart
    parser_restart = subparsers.add_parser("restart", help="restart netgrasp")
    parser_restart.set_defaults(func=restart)

    # status
    parser_status = subparsers.add_parser("status", help="netgrasp status")
    parser_status.set_defaults(func=status)

    # list
    parser_list = subparsers.add_parser("list", help="list devices")
    parser_list.add_argument("--type", "-t", choices=["device", "event"], default="device", help="type of object to list")
    parser_list.add_argument("--all", "-a", action="count", help="list all devices/events")
    parser_list.add_argument("--mac", "-m", help="filter by mac address (ex. -m ff:ff)")
    parser_list.add_argument("--ip", "-i", help="filter by ip address (ex. -i 127.0)")
    parser_list.add_argument("--vendor", "-v", help="filter by vendor (ex. -v apple)")
    parser_list.add_argument("--hostname", "-n", help="filter by hostname (ex. -h localhost)")
    parser_list.add_argument("--custom", "-c", help="filter by custom name (ex. -i phone)")
    parser_list.set_defaults(func=list)

    # identify (id, -i) ,v,i(ip),m(mac)
    parser_identify = subparsers.add_parser("identify", help="identify devices")
    parser_identify.add_argument("--set", "-s", nargs=2, help="set custom name (ex. -s 4 'my iPhone')")
    parser_identify.add_argument("--all", "-a", action="count", help="list all devices")
    parser_identify.add_argument("--mac", "-m", help="filter by mac address (ex. -m ff:ff:ff:ff:ff:ff)")
    parser_identify.add_argument("--ip", "-i", help="filter by ip address (ex. -i 127.0.0.1)")
    parser_identify.add_argument("--vendor", "-v", help="filter by vendor (ex. -v apple)")
    parser_identify.add_argument("--hostname", "-n", help="filter by hostname (ex. -h localhost)")
    parser_identify.add_argument("--custom", "-c", help="filter by custom name (ex. -i iphone)")
    parser_identify.set_defaults(func=identify)

    args = parser.parse_args()

    if args.config:
        config = args.config
    else:
        config = netgrasp.DEFAULT_CONFIG

    verbose = args.verbose

    ng = netgrasp.Netgrasp(config, verbose, False)
    ng.debugger, ng.config = netgrasp._init(verbose, False, debug.PRINT)

    # Find/load pidfile.
    ng.pidfile = ng.config.GetText("Logging", "pidfile", netgrasp.DEFAULT_PIDFILE, False)
    ng.is_running = is_running(ng.pidfile)

    args.func(args)

#!/usr/bin/env python
import os
import sys
import signal
import multiprocessing
import ConfigParser
import io
import logging
import logging.handlers
import pwd
import struct
import socket
import datetime
from email.utils import parseaddr

import time

HEARTBEAT = 'nghb'

class Netgrasp:
    BROADCAST = 'ff:ff:ff:ff:ff:ff'

    EVENT_SEEN              = 'seen'
    EVENT_SEEN_FIRST        = 'first_seen'
    EVENT_SEEN_FIRST_RECENT = 'first_seen_recently'
    EVENT_REQUESTED         = 'requested'
    EVENT_REQUESTED_FIRST   = 'first_requested'
    EVENT_STALE             = 'stale'
    EVENT_SCAN              = 'network_scan'

    PROCESSED_ALERT         = 1
    PROCESSED_DAILY_DIGEST  = 2
    PROCESSED_WEEKLY_DIGEST = 4
    PROCESSED_NOTIFICATION  = 8

    DEFAULT_UID       = 1
    DEFAULT_GID       = 1
    DEFAULT_LOGLEVEL  = logging.DEBUG
    DEFAULT_LOGFILE   = "netgrasp.log"
    DEFAULT_LOGFORMAT = "%(asctime)s [%(levelname)s/%(processName)s] %(message)s"
    DEFAULT_PIDFILE   = "netgrasp.pid"

    config_instance = ''
    database_instane = ''

    class Config:
        def __init__(self, parser):
            self.parser = parser
            self.found = self.parser.read(['/etc/netgrasp.cfg', '/usr/local/etc/netgrasp.cfg', '~/.netgrasp.cfg', './netgrasp.cnf'])

        def _GetValue(self, section, option, value, default, required, secret):
            if value:
                if secret:
                    logger.info("configuration [%s] '%s' set", section, option)
                else:
                    logger.info("configuration [%s] '%s' set to '%s'", section, option, value)
            else:
                if default:
                    value = default
                    if not secret:
                        if self.parser.has_section(section):
                            logger.info("configuration [%s] '%s' set to default of '%s'", section, option, value)
                        else:
                            logger.info("configuration [%s] does not exist: '%s' set to default '%s'", section, option, value)
                    else:
                        logger.info("configuration [%s] '%s' set to default", section, option)
                elif required:
                    logger.critical("Required [%s] '%s' not defined in configuration file, exiting.", section, option)
                    sys.exit("""Required [%s] '%s' not defined in configuration file, exiting.""" % (section, option))
            return value

        def GetText(self, section, option, default = None, required = True, secret = False):
            if (self.parser.has_section(section) and self.parser.has_option(section, option)):
                value = self.parser.get(section, option)
            else:
                value = None
            return self._GetValue(section, option, value, default, required, secret)

        def GetInt(self, section, option, default = None, required = True, secret = False):
            if (self.parser.has_section(section) and self.parser.has_option(section, option)):
                value = self.parser.getint(section, option)
            else:
                value = None
            return self._GetValue(section, option, value, default, required, secret)

        def GetBoolean(self, section, option, default = None, required = True, secret = False):
            if (self.parser.has_section(section) and self.parser.has_option(section, option)):
                value = self.parser.getboolean(section, option)
            else:
                value = None
            return self._GetValue(section, option, value, default, required, secret)

    class Database:
        filename = ''

        def __init__(self):
            self.connection = sqlite3.connect(ng.database_filename, detect_types=sqlite3.PARSE_DECLTYPES)

    # Determine who we are, for pretty logging.
    def whoami(self):
        whoami = pwd.getpwuid(os.getuid())
        return whoami[0]

    # Drop root permissions when no longer needed.
    def drop_root(self):
        os.setgroups([])
        os.setgid(self.config_instance.GetInt('Security', 'gid', ng.DEFAULT_GID))
        os.setuid(self.config_instance.GetInt('Security', 'uid', ng.DEFAULT_UID))
        logger.info('running as user %s',  self.whoami())

def main():
    logger.info('main process running as user %s',  ng.whoami())

    parent_conn, child_conn = multiprocessing.Pipe()
    database_lock = multiprocessing.Lock()
    child = multiprocessing.Process(name='wiretap', target=wiretap, args=[database_lock, child_conn])
    child.daemon = True
    child.start()

    ng.drop_root()
    assert (os.getuid() != 0) and (os.getgid() != 0), 'Failed to drop root privileges, aborting.'

    try:
        ng.database_instance = ng.Database()
    except Exception as e:
        logger.critical("%s", e)
        logger.critical("failed to open or create %s (as user %s), exiting", ng.database_filename, whoami())
        sys.exit("""Fatal error: failed to open or create database file %s (as user %s).""", (ng.database_filename, whoami()))
    logger.info('opened %s as user %s', ng.database_filename, ng.whoami());
    ng.database_instance.cursor = ng.database_instance.connection.cursor()

    database_lock.acquire()
    create_database()
    # @TODO: Add indexes
    database_lock.release()

    active_timeout = ng.config_instance.GetInt('Listen', 'active_timeout', 60 * 60 * 2)
    delay = ng.config_instance.GetInt('Listen', 'delay', 30)

    run = True
    while run:
        parent_conn.send(HEARTBEAT)
        logger.debug('top of master while loop')
        time.sleep(delay)
        run = False
        #identify_macs()
        #detect_stale_ips()
        #detect_netscans()
        #send_notifications()
        #send_email_alerts()
        #send_email_digests()
        #packet = parent_conn.recv()
        #src_ip = socket.inet_ntoa(packet.data.spa)
        #src_mac = "%x:%x:%x:%x:%x:%x" % struct.unpack("BBBBBB", packet.src)
        #dst_ip = socket.inet_ntoa(packet.data.tpa)
        #dst_mac = "%x:%x:%x:%x:%x:%x" % struct.unpack("BBBBBB", packet.dst)
        #if (packet.data.op == dpkt.arp.ARP_OP_REQUEST):
        #    logger.debug('ARP request from %s (%s) to %s (%s)', src_ip, src_mac, dst_ip, dst_mac)
        #    ip_seen(src_ip, src_mac, dst_ip, dst_mac, True)
        #    ip_request(dst_ip, dst_mac)
        #elif (packet.data.op == dpkt.arp.ARP_OP_REPLY):
        #    ip_seen(src_ip, src_mac, dst_ip, dst_mac, False)
        #    logger.debug('ARP reply from %s (%s) to %s (%s)', src_ip, src_mac, dst_ip, dst_mac)

    send_email()

# Perform simplistic email address validation.
def valid_email_address(address):
    if not '@' in parseaddr(address)[1]:
        return False
    else:
        return True

# Send an email.
def send_email():
    send = True
    email_to = ng.config_instance.GetText('Email', 'to', None, True).split(',')
    valid = True
    for email in email_to:
        if not valid_email_address(email):
            valid = False
            logger.warn('unable to send email, invalid to address (%s)', email)
    if not valid:
        send = False

    email_from = ng.config_instance.GetText('Email', 'from', None, True)
    if not valid_email_address(email_from):
        logger.warn('unable to send email, invalid from address (%s)', email)
        send = False

    email_hostname = ng.config_instance.GetText('Email', 'smtp_hostname', None, True)
    email_port = ng.config_instance.GetText('Email', 'smtp_port')
    email_ssl = ng.config_instance.GetBoolean('Email', 'smtp_ssl', True)
    email_username = ng.config_instance.GetText('Email', 'smtp_username', None, False)
    email_password = ng.config_instance.GetText('Email', 'smtp_password', None, False, True)

    # @TODO validate configured alerts and digests
    alerts = ng.config_instance.GetText('Email', 'alerts', True).split(',')
    digest = ng.config_instance.GetText('Email', 'digests', True).split(',')

# Child process: wiretap, uses pcap to sniff arp packets.
def wiretap(database_lock, child_conn):
    import sys
    logger.info('wiretap process running as user %s',  ng.whoami())

    assert os.getuid() == 0, 'Unable to initiate pcap, must be run as root.'

    try:
        import dpkt
    except Exception as e:
        logger.critical("fatal exception: %s", e)
        logger.critical("failed to import dpkt, try: 'pip install dpkt', exiting")
        sys.exit("Fatal error: failed to import dpkt, try: 'pip install dpkt', exiting")
    try:
        import pcap
    except Exception as e:
        logger.critical("fatal exception: %s", e)
        logger.critical("failed to import pcap, try: 'pip install pypcap', exiting")
        sys.exit("Fatal error: failed to import pcap, try: 'pip install pypcap', exiting")

    devices = pcap.findalldevs()
    logger.info('identified devices: %s', devices)
    if len(devices) <= 0:
      logger.critical('no available devices (are you in a jail?), exiting')
      sys.exit("Fatal error: pcap identified no devices, try running tcpdump manually to debug.")

    interface = ng.config_instance.GetText('Listen', 'interface', devices[0])
    local_net, local_mask = pcap.lookupnet(interface)
    logger.warning('listening for arp traffic on %s interface: %s/%s', interface, socket.inet_ntoa(local_net), socket.inet_ntoa(local_mask))

    try:
        pc = pcap.pcap(name=interface, snaplen=256, promisc=True, timeout_ms = 100, immediate=True)
        pc.setfilter('arp')
    except Exception as e:
        logger.critical("fatal exception: %s", e)
        logger.critical("failed to invoke pcap, exiting")
        sys.exit("""Failed to invoke pcap. Fatal exception: %s, exiting.""" % e)

    ng.drop_root()
    assert (os.getuid() != 0) and (os.getgid() != 0), 'Failed to drop root privileges, aborting.'

    try:
        ng.database_instance = ng.Database()
    except Exception as e:
        logger.critical("%s", e)
        logger.critical("failed to open or create %s (as user %s), exiting", ng.database_filename, whoami())
        sys.exit("""Fatal error: failed to open or create database file %s (as user %s).""", (ng.database_filename, whoami()))
    logger.info('opened %s as user %s', ng.database_filename, ng.whoami());
    ng.database_instance.cursor = ng.database_instance.connection.cursor()

    run = True
    last_heartbeat = datetime.datetime.now()
    while run:
        while child_conn.poll():
            message = child_conn.recv()
            if (message == HEARTBEAT):
                logger.info('received heartbeat from main process')
                last_heartbeat = datetime.datetime.now()
        pc.loop(1, received_arp, child_conn)
        time_to_exit = last_heartbeat + datetime.timedelta(minutes=1)
        if (datetime.datetime.now() >= time_to_exit):
            run = False
    logger.critical('No recent heartbeats from main processing, exiting.')

# Database definitions.
def create_database():
    logger.debug('Creating database tables, if not already existing.')
    ng.database_instance.cursor.execute("""
      CREATE TABLE IF NOT EXISTS state(
        id INTEGER PRIMARY KEY,
        key VARCHAR UNIQUE,
        value TEXT
      )
    """)
    ng.database_instance.cursor.execute("""
      CREATE TABLE IF NOT EXISTS seen(
        sid INTEGER PRIMARY KEY,
        mac TEXT,
        ip TEXT,
        interface TEXT,
        network TEXT,
        firstSeen TIMESTAMP,
        firstRequested TIMESTAMP,
        lastSeen TIMESTAMP,
        lastRequested TIMESTAMP,
        counter NUMERIC,
        active NUMERIC,
        self NUMERIC
      )
    """)
    ng.database_instance.cursor.execute("""
      CREATE TABLE IF NOT EXISTS arplog(
        aid INTEGER PRIMARY KEY,
        src_mac TEXT,
        src_ip TEXT,
        dst_mac TEXT,
        dst_ip TEXT,
        request NUMERIC,
        interface TEXT,
        network TEXT,
        timestamp TIMESTAMP
      )
    """)
    ng.database_instance.cursor.execute("""
      CREATE TABLE IF NOT EXISTS event(
        eid INTEGER PRIMARY KEY,
        mac TEXT,
        ip TEXT,
        interface TEXT,
        network TEXT,
        timestamp TIMESTAMP,
        processed NUMERIC,
        event TEXT
      )
    """)
    ng.database_instance.cursor.execute("""
      CREATE TABLE IF NOT EXISTS vendor(
        vid INTEGER PRIMARY KEY,
        mac TEXT,
        vendor TEXT,
        customname TEXT
      )
    """)
    ng.database_instance.cursor.execute("""
      CREATE TABLE IF NOT EXISTS host(
        hid INTEGER PRIMARY KEY,
        mac TEXT,
        ip TEXT,
        hostname TEXT,
        customname TEXT
      )
    """)
    ng.database_instance.connection.commit()

# We've sniffed an arp packet off the wire.
def received_arp(hdr, data, child_conn):
    logger.debug('arp packet sniffed')
    child_conn.send(dpkt.ethernet.Ethernet(data))
    exit

if __name__ == '__main__':
    ng = Netgrasp()
    ng.config_instance = ng.Config(ConfigParser.ConfigParser())

    # Start logger, reading relevant configuration.
    logger = logging.getLogger(__name__)
    formatter = logging.Formatter(ng.DEFAULT_LOGFORMAT)
    try:
        handler = logging.handlers.TimedRotatingFileHandler(ng.config_instance.GetText('Logging', 'filename', ng.DEFAULT_LOGFILE), when="midnight", backupCount=3)
    except Exception as e:
        sys.exit("""Fatal exception setting up log handler: %s""" % e)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)
    logger.info('starting')
    logger.info('loaded configuration file: %s', ng.config_instance.found)
    logger.setLevel(ng.config_instance.GetText('Logging', 'level', ng.DEFAULT_LOGLEVEL))

    keep_fds=[handler.stream.fileno()]

    if os.getuid() != 0:
        logger.critical("netgrasp must be run as root (currently running as %s), exiting", ng.whoami())
        sys.exit("""Netgrasp must be run as root (currently running as %s), exiting.""" % (ng.whoami()))

    try:
        import sqlite3
    except Exception as e:
        logger.critical("fatal exception: %s", e)
        logger.critical("failed to import sqlite3, try: 'pip install sqlite3', exiting.")
        sys.exit("Fatal error: failed to import sqlite3, try: 'pip install sqlite3', exiting.")

    try:
        import dpkt
    except Exception as e:
        logger.critical("fatal exception: %s", e)
        logger.critical("failed to import dpkt, try: 'pip install dpkt', exiting")
        sys.exit("Fatal error: failed to import dpkt, try: 'pip install dpkt', exiting")

    try:
        from daemonize import Daemonize
    except Exception as e:
        logger.critical("fatal exception: %s", e)
        logger.critical("failed to import daemonize, try: 'pip install daemonize', exiting.")
        sys.exit("Fatal error: failed to import daemonize, try: 'pip install daemonize', exiting.")

    notification_alerts = ng.config_instance.GetText('Notifications', 'alerts')
    if notification_alerts:
        try:
            import ntfy
        except Exception as e:
            logger.critical("fatal exception: %s", e)
            logger.critical("failed to import ntfy (as user %s), try: 'pip install ntfy' or disable [Notification] alerts, exiting.", whoami())
            sys.exit("""Fatal error: failed to import ntfy (as user %s), try: 'pip install ntfy' or disable [Notification] alerts.""" % (whoami()))
    else:
        notification_alerts = []
    ng.database_filename = ng.config_instance.GetText('Database', 'filename', False)

    pidfile = ng.config_instance.GetText('Logging', 'pidfile', ng.DEFAULT_PIDFILE)

    try:
        daemon = Daemonize(app="netgrasp", pid=pidfile, action=main, keep_fds=keep_fds, logger=logger, verbose=True)
        daemon.start()
    except Exception as e:
        sys.exit("""Failed to daemonize: %s, exiting""" % e)

def set_state(key, value):
    logger.debug('Set key[%s] to value[%s]', key, value)
    db_cursor.execute('INSERT OR REPLACE INTO state (key, value) VALUES (?, ?)', (key, value));
    nbcore.db_conn.commit()

def get_state(key, default_value):
    db_cursor.execute('SELECT value FROM state WHERE key=?', (key,));
    value = db_cursor.fetchone();
    if value:
        return value[0]
    else:
        return default_value

def pretty_date(time):
    if not time:
        return "never"
    now = datetime.datetime.now()
    diff = now - time
    second_diff = diff.seconds
    day_diff = diff.days

    if day_diff < 0:
        return ''

    if day_diff == 0:
        if second_diff < 10:
            return "just now"
        if second_diff < 60:
            return str(second_diff) + " seconds ago"
        if second_diff < 120:
            return "a minute ago"
        if second_diff < 3600:
            return str(second_diff / 60) + " minutes ago"
        if second_diff < 7200:
            return "an hour ago"
        if second_diff < 86400:
            return str(second_diff / 3600) + " hours ago"
    if day_diff == 1:
        return "yesterday"
    if day_diff < 7:
        return str(day_diff) + " days ago"
    if day_diff < 31:
        return str(day_diff / 7) + " weeks ago"
    if day_diff < 365:
        return str(day_diff / 30) + " months ago"
    return str(day_diff / 365) + " years ago"

def ip_is_mine(ip):
    return (ip == socket.gethostbyname(socket.gethostname()))

def first_seen(ip, mac):
    logger.debug("SELECT firstSeen FROM seen WHERE ip = '%s' AND mac = '%s' AND firstSeen NOT NULL ORDER BY firstSeen ASC LIMIT 1", ip, mac)
    db_cursor.execute('SELECT firstSeen FROM seen WHERE ip=? AND mac=? AND firstSeen NOT NULL ORDER BY firstSeen ASC LIMIT 1', (ip, mac))
    active = db_cursor.fetchone()
    if active:
        return active[0]
    else:
        return False

def first_seen_recently(ip, mac):
    logger.debug("SELECT firstSeen FROM seen WHERE ip = '%s' AND mac = '%s' AND firstSeen NOT NULL ORDER BY firstSeen DESC LIMIT 1", ip, mac)
    db_cursor.execute('SELECT firstSeen FROM seen WHERE ip=? AND mac=? AND firstSeen NOT NULL ORDER BY firstSeen DESC LIMIT 1', (ip, mac))
    recent = db_cursor.fetchone()
    if recent:
        return recent[0]
    else:
        return False

def last_seen(ip, mac):
    logger.debug("SELECT lastSeen FROM seen WHERE ip = '%s' AND mac = '%s' AND lastSeen NOT NULL ORDER BY lastSeen DESC LIMIT 1", ip, mac)
    db_cursor.execute('SELECT lastSeen FROM seen WHERE ip=? AND mac=? AND lastSeen NOT NULL ORDER BY lastSeen DESC LIMIT 1', (ip, mac))
    active = db_cursor.fetchone()
    if active:
        return active[0]
    else:
        return False

def previously_seen(ip, mac):
    logger.debug("SELECT lastSeen FROM seen WHERE ip = '%s' AND mac = '%s' AND lastSeen NOT NULL AND active != 1 ORDER BY lastSeen DESC LIMIT 1", ip, mac)
    db_cursor.execute('SELECT lastSeen FROM seen WHERE ip=? AND mac=? AND lastSeen NOT NULL AND active != 1 ORDER BY lastSeen DESC LIMIT 1', (ip, mac))
    previous = db_cursor.fetchone()
    if previous:
        return previous[0]
    else:
        return False

def first_requested(ip, mac):
    logger.debug("SELECT firstRequested FROM seen WHERE ip = '%s' AND mac = '%s' AND firstRequested NOT NULL ORDER BY firstRequested ASC LIMIT 1", ip, mac)
    db_cursor.execute('SELECT firstRequested FROM seen WHERE ip=? AND mac=? AND firstRequested NOT NULL ORDER BY firstRequested ASC LIMIT 1', (ip, mac))
    active = db_cursor.fetchone()
    if active:
        return active[0]
    else:
        return False

def last_requested(ip, mac):
    logger.debug("SELECT lastRequested FROM seen WHERE ip = '%s' AND mac = '%s' AND lastRequested NOT NULL ORDER BY lastRequested DESC LIMIT 1", ip, mac)
    db_cursor.execute('SELECT lastRequested FROM seen WHERE ip=? AND mac=? AND lastRequested NOT NULL ORDER BY lastRequested DESC LIMIT 1', (ip, mac))
    last = db_cursor.fetchone()
    if last:
        return last[0]
    else:
        return False

def ip_seen(src_ip, src_mac, dst_ip, dst_mac, request):
    now = datetime.datetime.now()

    logger.debug("INSERT INTO arplog (src_mac, src_ip, dst_mac, dst_ip, request, timestamp) VALUES('%s', '%s', '%s', '%s', '%d', '%s')", src_mac, src_ip, dst_mac, dst_ip, request, now)
    db_cursor.execute('INSERT INTO arplog (src_mac, src_ip, dst_mac, dst_ip, request, timestamp) VALUES(?, ?, ?, ?, ?, ?)', (src_mac, src_ip, dst_mac, dst_ip, request, now))

    # @TODO research and see if we should be treating this another way
    if (src_ip == '0.0.0.0'):
        logger.info('Ignoring IP source of 0.0.0.0');
        return False

    active = False
    lastSeen = False
    lastRequested = False
    counter = 0
    sid = 0
    logger.debug("SELECT active, lastSeen, lastRequested, counter, sid FROM seen WHERE ip = '%s' AND mac = '%s' AND active=1", src_ip, src_mac)
    db_cursor.execute('SELECT active, lastSeen, lastRequested, counter, sid FROM seen WHERE ip=? AND mac=? AND active=1', (src_ip, src_mac))
    result = db_cursor.fetchone()
    if result:
        active = result[0]
        lastSeen = result[1]
        lastRequested = result[2]
        counter = result[3]
        sid = result[4]
    else:
        if (src_mac != BROADCAST):
            logger.debug("SELECT active, lastSeen, lastRequested, counter, sid FROM seen WHERE ip = '%s' AND mac = '%s' AND active=1", src_ip, BROADCAST)
            db_cursor.execute('SELECT active, lastSeen, lastRequested, counter, sid FROM seen WHERE ip=? AND mac=? AND active=1', (src_ip, BROADCAST))
            result = db_cursor.fetchone()
            if result:
                active = result[0]
                lastSeen = result[1]
                lastRequested = result[2]
                counter = result[3]
                sid = result[4]
        else:
            logger.debug("SELECT active, lastSeen, lastRequested, counter, sid FROM seen WHERE ip = '%s' AND active=1", src_ip)
            db_cursor.execute('SELECT active, lastSeen, lastRequested, counter, sid FROM seen WHERE ip=? AND active=1', (src_ip,))
            result = db_cursor.fetchone()
            if result:
                active = result[0]
                lastSeen = result[1]
                lastRequested = result[2]
                counter = result[3]
                sid = result[4]

    log_event(src_ip, src_mac, EVENT_SEEN)
    if active:
        if lastSeen:
            # has been active recently
            logger.debug('%s (%s) is active', src_ip, src_mac)
            logger.debug("UPDATE seen set mac='%s', lastSeen='%s', counter=?, active=1 WHERE ip=%d", src_mac, now, sid)
            db_cursor.execute('UPDATE seen set mac=?, lastSeen=?, counter=?, active=1 WHERE sid=?', (src_mac, now, counter + 1, sid))
        else:
            # has not been active recently, but was requested recently
            if first_seen(src_ip, src_mac):
                # First time we've seen IP since it was stale.
                log_event(src_ip, src_mac, EVENT_SEEN_FIRST_RECENT)
                lastSeen = last_seen(src_ip, src_mac)
                if lastSeen:
                    timeSince = datetime.datetime.now() - lastSeen
                    logger.info('%s (%s) is active again (after %s)', src_ip, src_mac, timeSince)
                else:
                    logger.warning("We've seen a packet %s [%s] with a firstSeen (%s) but no lastSeen -- this shouldn't happen.", src_ip, src_mac, first_seen(src_ip, src_mac))
            else:
                # First time we've actively seen this IP.
                log_event(src_ip, src_mac, EVENT_SEEN_FIRST)
                log_event(src_ip, src_mac, EVENT_SEEN_FIRST_RECENT)
                logger.info('%s (%s) is active, first time seeing', src_ip, src_mac)

            # @TODO properly handle multiple active occurences of the same IP
            logger.debug("UPDATE seen set mac='%s', firstSeen='%s', lastSeen='%s', counter=%d, active=1, WHERE sid=%d", src_mac, now, now, counter + 1, sid)
            db_cursor.execute('UPDATE seen set mac=?, firstSeen=?, lastSeen=?, counter=?, active=1 WHERE sid=?', (src_mac, now, now, counter + 1, sid))
        nbcore.db_conn.commit()
    else:
        # First time we've seen this IP.
        log_event(src_ip, src_mac, EVENT_SEEN_FIRST)
        log_event(src_ip, src_mac, EVENT_SEEN_FIRST_RECENT)
        logger.debug("INSERT INTO seen (mac, ip, firstSeen, lastSeen, counter, active, self) VALUES('%s', '%s', '%s', '%s', 1, 1, %d)", src_mac, src_ip, now, now, ip_is_mine(src_ip))
        db_cursor.execute('INSERT INTO seen (mac, ip, firstSeen, lastSeen, counter, active, self) VALUES(?, ?, ?, ?, 1, 1, ?)', (src_mac, src_ip, now, now, ip_is_mine(src_ip)))
        logger.info('%s (%s) is active, first time seeing', src_ip, src_mac)
        nbcore.db_conn.commit()

def ip_request(ip, mac):
    now = datetime.datetime.now()

    active = False
    lastRequested = False
    logger.debug("SELECT active, lastRequested, sid FROM seen WHERE ip = '%s' AND mac = '%s' AND active=1", ip, mac)
    db_cursor.execute('SELECT active, lastRequested, sid FROM seen WHERE ip=? AND mac=? AND active=1', (ip, mac))
    requested = db_cursor.fetchone()
    if requested:
        active = requested[0]
        lastRequested = requested[1]
        sid = requested[2]
    else:
        if (mac == BROADCAST):
            # Maybe we already have seen a request for this address
            logger.debug("SELECT active, lastRequested, sid FROM seen WHERE ip = '%s' AND mac = '%s' AND active=1", ip, BROADCAST)
            db_cursor.execute('SELECT active, lastRequested, sid FROM seen WHERE ip=? AND mac=? AND active=1', (ip, BROADCAST))
            requested = db_cursor.fetchone()
            if requested:
                active = requested[0]
                lastRequested = requested[1]
                sid = requested[2]
            else:
                # Maybe the IP has been seen already
                logger.debug("SELECT active, lastRequested, sid FROM seen WHERE ip = '%s' AND active=1", ip)
                db_cursor.execute('SELECT active, lastRequested, sid FROM seen WHERE ip=? AND active=1', (ip,))
                requested = db_cursor.fetchone()
                if requested:
                    active = requested[0]
                    lastRequested = requested[1]
                    sid = requested[2]

    log_event(ip, mac, EVENT_REQUESTED)
    if active:
        # Update:
        logger.debug("UPDATE seen set lastRequested='%s' WHERE sid = %d", now, sid)
        db_cursor.execute('UPDATE seen set lastRequested=? WHERE sid=?', (now, sid))
        logger.debug('%s (%s) requested', ip, mac)
        nbcore.db_conn.commit()
    else:
        # First time we've seen a request for this IP.
        log_event(ip, mac, EVENT_REQUESTED_FIRST)
        logger.debug("INSERT INTO seen (mac, ip, firstRequested, lastRequested, counter, active, self) VALUES('%s', '%s', '%s', '%s', 0, 1, %d)", mac, ip, now, now, ip_is_mine(ip))
        db_cursor.execute("INSERT INTO seen (mac, ip, firstRequested, lastRequested, counter, active, self) VALUES(?, ?, ?, ?, 1, 1, ?)", (mac, ip, now, now, ip_is_mine(ip)))
        logger.info('%s (%s) requested, first time seeing', ip, mac)
        nbcore.db_conn.commit()

def log_event(ip, mac, event):
    now = datetime.datetime.now()
    logger.debug("INSERT INTO event (mac, ip, timestamp, processed, event) VALUES('%s', '%s', '%s', '%s', '%s')", mac, ip, now, 0, event)
    db_cursor.execute('INSERT INTO event (mac, ip, timestamp, processed, event) VALUES(?, ?, ?, ?, ?)', (mac, ip, now, 0, event))

# Mark IP/MAC pairs as no longer active if we've not seen ARP activity for >active_timeout seconds
def detect_stale_ips():
    stale = datetime.datetime.now() - datetime.timedelta(seconds=active_timeout)
    logger.debug("SELECT mac, ip, firstSeen, lastSeen FROM seen WHERE active = 1 AND lastSeen < '%s'", stale)
    db_cursor.execute('SELECT mac, ip, firstSeen, lastSeen FROM seen WHERE active = 1 AND lastSeen < ?', (stale,))
    rows = db_cursor.fetchall()
    commit = 0
    for row in rows:
        if (row[2] and row[3]):
            timeActive = row[3] - row[2]
        else:
            timeActive = 'unknown'
        log_event(row[1], row[0], EVENT_STALE)
        logger.info("%s [%s] is no longer active (was active for %s)", row[1], row[0], timeActive)
        logger.debug("UPDATE seen SET active = 0 WHERE mac = '%s' AND ip = '%s'", row[0], row[1])
        db_cursor.execute('UPDATE seen SET active = 0 WHERE mac=? AND ip=?', (row[0], row[1]))
        commit = 1
    if commit:
        nbcore.db_conn.commit()

def detect_netscans():
    now = datetime.datetime.now()
    three_minutes_ago = now - datetime.timedelta(minutes=3)
    logger.debug("SELECT COUNT(DISTINCT(dst_ip)) as count, src_mac, src_ip FROM arplog WHERE request=1 AND timestamp>='%s' AND count > 50 GROUP BY src_ip ORDER BY count", three_minutes_ago)
    db_cursor.execute('SELECT COUNT(DISTINCT(dst_ip)) as count, src_mac, src_ip FROM arplog WHERE request=1 AND timestamp>=? GROUP BY src_ip ORDER BY count', (three_minutes_ago,))
    scans = db_cursor.fetchall()
    for scan in scans:
        # @TODO we should be able to filter <50 with the SQL query
        if scan[0] > 50:
            logger.debug("SELECT eid FROM event WHERE mac='%s' AND ip='%s' AND event='%s' AND timestamp>'%s'", scan[1], scan[2], EVENT_SCAN, three_minutes_ago)
            db_cursor.execute("SELECT eid FROM event WHERE mac=? AND ip=? AND event=? AND timestamp>?", (scan[1], scan[2], EVENT_SCAN, three_minutes_ago))
            already_detected = db_cursor.fetchone()
            if not already_detected:
                logger.debug("INSERT INTO event (mac, ip, timestamp, processed, event) VALUES('%s', '%s', '%s', 0, '%s')", (scan[1], scan[2], now, EVENT_SCAN))
                db_cursor.execute('INSERT INTO event (mac, ip, timestamp, processed, event) VALUES(?, ?, ?, 0, ?)', (scan[1], scan[2], now, EVENT_SCAN))
                logger.info('Detected network scan by %s [%s]', scan[2], scan[1])
        else:
            logger.debug('Not a scan: %s', scan)

def send_notifications():
    if notification_alerts:
        day = datetime.datetime.now() - datetime.timedelta(days=1)
        logger.debug('SELECT eid, mac, ip, timestamp, event FROM event WHERE NOT (processed & %d)', PROCESSED_NOTIFICATION);
        db_cursor.execute('SELECT eid, mac, ip, timestamp, event, processed FROM event WHERE NOT (processed & 8)');
        rows = db_cursor.fetchall()
        commit = 0
        for row in rows:
            commit = 1
            logger.debug('processing event %d for %s [%s] at %s', row[0], row[2], row[1], row[3])
            # only send notifications for configured events
            if row[4] in alerts:
                logger.info('event %s [%d] in %s, generating notification alert', row[4], row[0], alerts)
                firstSeen = first_seen(row[2], row[1])
                lastSeen = first_seen_recently(row[2], row[1])
                previouslySeen = previously_seen(row[2], row[1])
                title = """Netgrasp alert: %s""" % (row[4])
                body = """%s with IP %s [%s], seen %s, previously seen %s, first seen %s""" % (name_ip(row[1], row[2]), row[2], row[1], pretty_date(lastSeen), pretty_date(previouslySeen), pretty_date(firstSeen))
                ntfy.notify(body, title)
                db_cursor.execute('UPDATE event SET processed = ? WHERE eid = ?', (row[5] + 8, row[0]))
            else:
                logger.debug('event %s [%d] NOT in %s', row[4], row[0], alerts)
        if commit:
            nbcore.db_conn.commit()

def send_email_alerts():
    import smtplib
    day = datetime.datetime.now() - datetime.timedelta(days=1)
    logger.debug('SELECT eid, mac, ip, timestamp, event FROM event WHERE NOT (processed & %d)', PROCESSED_ALERT);
    # @TODO, use variable: 1 == PROCESSED_ALERT
    db_cursor.execute('SELECT eid, mac, ip, timestamp, event, processed FROM event WHERE NOT (processed & 1)');
    rows = db_cursor.fetchall()
    commit = 0
    for row in rows:
        commit = 1
        logger.debug('processing event %d for %s [%s] at %s', row[0], row[2], row[1], row[3])
        processed = True
        # only send emails for configured events
        if row[4] in alerts:
            logger.info('event %s [%d] in %s, generating notification email', row[4], row[0], alerts)
            # get more information about this entry ...
            logger.debug("SELECT s.firstSeen, s.firstRequested, s.lastSeen, s.lastRequested, s.active, s.self, v.vendor, v.customname, h.hostname, h.customname FROM seen s LEFT JOIN vendor v ON s.mac = v.mac LEFT JOIN host h ON s.mac = h.mac AND s.ip = h.ip WHERE s.mac='%s' AND s.ip='%s' ORDER BY lastseen DESC", row[1], row[2])
            db_cursor.execute('SELECT s.firstSeen, s.firstRequested, s.lastSeen, s.lastRequested, s.active, s.self, v.vendor, v.customname, h.hostname, h.customname FROM seen s LEFT JOIN vendor v ON s.mac = v.mac LEFT JOIN host h ON s.mac = h.mac AND s.ip = h.ip WHERE s.mac=? AND s.ip=? ORDER BY lastSeen DESC', (row[1], row[2]))
            info = db_cursor.fetchone()
            if not info:
                logger.warning("Event for ip %s [%s] that we haven't seen", row[2], row[1])
                return
            firstSeen = first_seen(row[2], row[1])
            firstRequested = first_requested(row[2], row[1])
            lastSeen = last_seen(row[2], row[1])
            previouslySeen = previously_seen(row[2], row[1])
            lastRequested = last_requested(row[2], row[1])
            subject = """Netgrasp alert: %s""" % (row[4])
            body = """IP %s [%s]\n  Vendor: %s\nCustom name: %s\n  Hostname: %s\n  Custom host name: %s\n  First seen: %s\n  Most recently seen: %s\n  Previously seen: %s\n  First requested: %s\n  Most recently requested: %s\n  Currently active: %d\n  Self: %d\n""" % (row[2], row[1], info[6], info[7], info[8], info[9], pretty_date(firstSeen), pretty_date(lastSeen), pretty_date(previouslySeen), pretty_date(firstRequested), pretty_date(lastRequested), info[4], info[5])
            db_cursor.execute('SELECT DISTINCT dst_ip, dst_mac FROM arplog WHERE src_mac=? AND timestamp>=?', (row[1], day))
            results = db_cursor.fetchall()
            if results:
                body += """\nIn the last day, this device talked to:"""
            for peer in results:
                body += """\n - %s (%s)""" % (peer[0], name_ip(peer[1], peer[0]))
            message = """From: %s\nTo: %s\nSubject: %s\n\n%s""" % (email_from, ", ".join(email_to), subject, body)
            try:
                if email_ssl:
                    try:
                        server = smtplib.SMTP_SSL(email_hostname, email_port)
                        server.ehlo()
                    except:
                        server = smtplib.SMTP(email_hostname, email_port)
                        server.ehlo()
                        server.starttls()
                else:
                    server = smtplib.SMTP(email_hostname, email_port)
                    server.ehlo()
                if email_username and email_password:
                    server.login(email_username, email_password)
                server.sendmail(email_from, email_to, message)
                server.close()

            except Exception as e:
                logger.warning('Failed to send email: %s', e)
                processed = False
        else:
            logger.debug('event %s [%d] NOT in %s', row[4], row[0], alerts)
        if processed:
            db_cursor.execute('UPDATE event SET processed = ? WHERE eid = ?', (row[5] + 1, row[0]))
    if commit:
        nbcore.db_conn.commit()

def identify_macs():
    import re
    import httplib
    commit = 0

    db_cursor.execute('SELECT s.mac, s.ip FROM seen s LEFT JOIN vendor v ON s.mac = v.mac WHERE s.active = 1 AND v.mac IS NULL')
    rows = db_cursor.fetchall()
    for row in rows:
        commit = 1
        raw_mac = row[0]
        if re.match("[0-9a-f]{2}([-:])[0-9a-f]{2}(\\1[0-9a-f]{2}){4}$", raw_mac.lower()):
            mac = raw_mac
        else:
            mac = []
            pieces = raw_mac.split(':')
            if not pieces:
                pieces = row_mac.split('-')
            for piece in pieces:
                if len(piece) == 1:
                    piece = '0'+piece
                mac.append(piece)
            mac = ":".join(mac)
        logger.debug('Looking up vendor for %s [%s]', row[1], raw_mac)
        http = httplib.HTTPConnection('api.macvendors.com', 80)
        url = """/%s""" % mac
        http.request("GET", url)
        response = http.getresponse()
        if response.status == 200 and response.reason == 'OK':
            vendor = response.read()
            logger.info('Identified %s [%s] as %s', row[1], raw_mac, vendor)
            db_cursor.execute('INSERT INTO vendor (mac, vendor) VALUES (?, ?)', (raw_mac, vendor))
        else:
            logger.info('Failed identify vendor for [%s]', raw_mac)
            db_cursor.execute("INSERT INTO vendor (mac, vendor) VALUES (?, 'unknown')", (raw_mac,))

    db_cursor.execute('SELECT s.mac, s.ip FROM seen s LEFT JOIN host h ON s.mac = h.mac AND s.ip = h.ip WHERE s.active = 1 AND h.mac IS NULL')
    rows = db_cursor.fetchall()
    for row in rows:
        commit = 1
        logger.debug('requesting gethostbyaddr for %s [%s]', row[1], row[0])
        try:
            hostname = socket.gethostbyaddr(row[1])
        except Exception as e:
            logger.debug('gethostbyaddr failed: %s', e)
            hostname = ['unknown']
        logger.debug('hostname: %s', hostname)
        db_cursor.execute('INSERT INTO host (mac, ip, hostname) VALUES (?, ?, ?)', (row[0], row[1], hostname[0]))

    if commit:
        nbcore.db_conn.commit()

def name_ip(mac, ip):
    if (mac == BROADCAST):
        logger.debug("SELECT h.mac, h.ip, h.customname, h.hostname, v.customname, v.vendor FROM host h LEFT JOIN vendor v ON h.mac = v.mac WHERE h.ip='%s'", ip)
        db_cursor.execute("SELECT h.mac, h.ip, h.customname, h.hostname, v.customname, v.vendor FROM host h LEFT JOIN vendor v ON h.mac = v.mac WHERE h.ip=?", (ip,))
    else:
        logger.debug("SELECT h.mac, h.ip, h.customname, h.hostname, v.customname, v.vendor FROM host h LEFT JOIN vendor v ON h.mac = v.mac WHERE h.ip='%s' AND h.mac='%s'", ip, mac)
        db_cursor.execute("SELECT h.mac, h.ip, h.customname, h.hostname, v.customname, v.vendor FROM host h LEFT JOIN vendor v ON h.mac = v.mac WHERE h.ip=? AND h.mac=?", (ip, mac))
    detail = db_cursor.fetchone()
    if not detail:
        return detail
    if detail[2]:
        return detail[2]
    elif detail[3] and (detail[3] != 'unknown'):
        return detail[3]
    elif detail[4]:
        return detail[4]
    elif detail[5]:
        return """Unidentified device by %s""" % (detail[5])
    else:
        return detail[0]

def send_email_digests():
    import smtplib

    now = datetime.datetime.now()

    digests = ['daily', 'weekly']
    for digest in digests:
        if (digest == 'daily'):
            timestamp_string = 'daily_digest_timestamp'
            future_digest_timestamp = now + datetime.timedelta(days=1)
            time_period = now - datetime.timedelta(days=1)
            time_period_description = '24 hours'
            previous_time_period = now - datetime.timedelta(days=2)
        elif (digest == 'weekly'):
            timestamp_string = 'weekly_digest_timestamp'
            future_digest_timestamp = now + datetime.timedelta(weeks=1)
            time_period = now - datetime.timedelta(weeks=1)
            time_period_description = '7 days'
            previous_time_period = now - datetime.timedelta(weeks=2)

        next_digest_timestamp = get_state(timestamp_string, '')
        if next_digest_timestamp:
            # convert string to python datetime.
            next_digest_timestamp = datetime.datetime.strptime(next_digest_timestamp, "%Y-%m-%d %H:%M:%S.%f")
        else:
            # first time here, schedule a digest for appropriate time in future
            set_state(timestamp_string, future_digest_timestamp)
            next_digest_timestamp = future_digest_timestamp

        if now < next_digest_timestamp:
            # it's not yet time to send this digest
            continue

        # time to send a digest
        logger.info('Sending %s digest', digest)
        set_state(timestamp_string, future_digest_timestamp)

        if (digest == 'daily'):
            # PROCESSED_DAILY_DIGEST  = 2
            db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE NOT (processed & 2) AND timestamp>=? AND timestamp<=? AND event = 'requested'", (time_period, now))
            requested = db_cursor.fetchall()
            db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE NOT (processed & 2) AND timestamp>=? AND timestamp<=? AND event = 'seen'", (time_period, now))
            seen = db_cursor.fetchall()
        elif (digest == 'weekly'):
            # PROCESSED_WEEKLY_DIGEST = 4
            db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE NOT (processed & 4) AND timestamp>=? AND timestamp<=? AND event = 'requested'", (time_period, now))
            requested = db_cursor.fetchall()
            db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE NOT (processed & 4) AND timestamp>=? AND timestamp<=? AND event = 'seen'", (time_period, now))
            seen = db_cursor.fetchall()

        db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE timestamp>=? AND timestamp<=? AND event = 'seen'", (previous_time_period, time_period))
        seen_previous = db_cursor.fetchall()

        new = set(seen) - set(seen_previous)
        gone = set(seen_previous) - set(seen)

        subject = """Netgrasp %s digest""" % (digest)
        body = """In the past %s, %d IPs were active:""" % (time_period_description, len(seen))
        noisy = []
        some_new = False
        for ip in seen:
            db_cursor.execute('SELECT COUNT(DISTINCT(dst_ip)) FROM arplog WHERE request=1 AND src_ip=? AND timestamp>=? AND timestamp <=?', (ip[1], time_period, now))
            requests = db_cursor.fetchone()
            if (requests[0] > 10):
                noisy.append((ip[0], ip[1], requests[0], name_ip(ip[0], ip[1])))
            if ip in new:
                body += """\n - %s* (%s)""" % (ip[1], name_ip(ip[0], ip[1]))
                some_new = True
            else:
                body += """\n - %s (%s)""" % (ip[1], name_ip(ip[0], ip[1]))
        if some_new:
            body+= """\n* = not active in the previous %s""" % (time_period_description)

        body += """\n\n%d unique IPs requested.""" % (len(requested),)

        if noisy:
            body += """\n\nThe following devices requested 10 or more IPs on the network:"""
            for noise in noisy:
                body += """\n - %s (%s) requested %d IP addresses""" % (noise[1], noise[3], noise[2])
                if (noise[2] > 50):
                    body += " (network scan?)"

        if gone:
            body += """\n\nThe following IPs were not active, but were active the previous %s:""" % (time_period_description)
            for ip in gone:
                body += """\n - %s (%s)""" % (ip[1], name_ip(ip[0], ip[1]))

        if (digest == 'daily'):
            body += "\n\nActive devices per hour during the past day:"
            range = 24
            while (range > 0):
                lower = now - datetime.timedelta(hours=range)
                range = range - 1
                upper = now - datetime.timedelta(hours=range)
                logger.debug("SELECT DISTINCT mac, ip FROM event WHERE event = 'seen' AND timestamp>='%s' AND timestamp<'%s'", lower, upper)
                db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE event = 'seen' AND timestamp>=? AND timestamp<?", (lower, upper))
                distinct = db_cursor.fetchall()
                body += """\n - %s: %d""" % (lower.strftime("%I %p, %x"), len(distinct))
        elif (digest == 'weekly'):
            body += "\n\nActive devices per day during the past week:"
            range = 7
            while (range > 0):
                lower = now - datetime.timedelta(days=range)
                range = range - 1
                upper = now - datetime.timedelta(days=range)
                logger.debug("SELECT DISTINCT mac, ip FROM event WHERE event = 'seen' AND timestamp>='%s' AND timestamp<'%s'", lower, upper)
                db_cursor.execute("SELECT DISTINCT mac, ip FROM event WHERE event = 'seen' AND timestamp>=? AND timestamp<?", (lower, upper))
                distinct = db_cursor.fetchall()
                body += """\n - %s: %d""" % (lower.strftime("%A, %x"), len(distinct))

        if (digest == 'daily'):
            logger.debug("SELECT eid, processed FROM event WHERE timestamp>='%s' AND timestamp<='%s' AND NOT (processed & 2)", time_period, now)
            db_cursor.execute('SELECT eid, processed FROM event WHERE timestamp>=? AND timestamp<=? AND NOT (processed & 2)', (time_period, now))
            processed = PROCESSED_DAILY_DIGEST
        elif (digest == 'weekly'):
            logger.debug("SELECT eid, processed FROM event WHERE timestamp>='%s' AND timestamp<='%s' AND NOT (processed & 4)", time_period, now)
            db_cursor.execute('SELECT eid, processed FROM event WHERE timestamp>=? AND timestamp<=? AND NOT (processed & 4)', (time_period, now))
            processed = PROCESSED_WEEKLY_DIGEST
        rows = db_cursor.fetchall()
        for row in rows:
            logger.debug('UPDATE event SET processed=%d WHERE eid=%d', row[1] + processed, row[0])
            db_cursor.execute('UPDATE event SET processed=? WHERE eid=?', (row[1] + processed, row[0]))

        message = """From: %s\nTo: %s\nSubject: %s\n\n%s""" % (email_from, ", ".join(email_to), subject, body)
        try:
            if email_ssl:
                try:
                    server = smtplib.SMTP_SSL(email_hostname, email_port)
                    server.ehlo()
                except:
                    server = smtplib.SMTP(email_hostname, email_port)
                    server.ehlo()
                    server.starttls()
            else:
                server = smtplib.SMTP(email_hostname, email_port)
                server.ehlo()
            if email_username and email_password:
                server.login(email_username, email_password)
            server.sendmail(email_from, email_to, message)
            server.close()

        except Exception as e:
            logger.warning('Failed to send email: %s', e)
